{
  "timestamp": "2025-06-17T22:10:38.217815",
  "step": "cc3d_file_creation",
  "input": {
    "python_code": "from cc3d.core.PySteppables import *\n\npython \n from  Com pu Cell 3 D  import  Com pu Cell Setup ,  Ste pp able Base Py ,  SB ML Parser \n from  Py Ste pp ables  import  Ste pp ables \n import  numpy  as  np \n\n #  Define  cell  types  based  on  ontology \n CELL _TYPE _E PI  =   1 \n CELL _TYPE _M ES  =   2 \n CELL _TYPE _END O  =   3 \n CELL _TYPE _COL LAG EN  =   4 \n CELL _TYPE _P OT TS  =   5 \n\n class  Simulation ( Ste pp able Base Py ):\n      def  __ init __( self ,  _ sim ulator ,  _ frequency = 1 ):\n          Ste pp able Base Py .__ init __( self ,  _ sim ulator ,  _ frequency )\n          self .sim ulator  =  _ sim ulator \n          self .timer  =   0 \n        \n      def  start (self ):\n          #  Initialize  simulation \n          self .timer  =   0 \n          #  Create  cell  field \n          cell _field  =  self .sim ulator .get _cell _field ()\n          #  Set  default  cell  type \n          cell _field .default _cell _type  =  CELL _TYPE _COL LAG EN \n        \n          #  Initialize  cell  counts \n          self .cell _counts  =  {\n              CELL _TYPE _E PI :   0 ,\n              CELL _TYPE _M ES :   0 ,\n              CELL _TYPE _END O :   0 ,\n              CELL _TYPE _COL LAG EN :   0 ,\n              CELL _TYPE _P OT TS :   0 \n          }\n         \n      def  step (self ):\n          #  Example  E MT  transition  logic \n          if  self .timer  %   100  ==   0 :\n              #  Get  all  epith elial  cells  and  transition  some  to  mes ench ym al \n              epith elial _cells  =  self .sim ulator .get _cell _ids ( CELL _TYPE _E PI )\n              for  cell _id  in  epith elial _cells :\n                  if  np .random .rand ()  <  0 . 1 :    #   10 %  chance  to  transition \n                      self .sim ulator .change _cell _type (cell _id ,  CELL _TYPE _M ES )\n                     \n          #  Update  cell  counts \n          self .cell _counts [ CELL _TYPE _E PI ]  =  len (self .sim ulator .get _cell _ids ( CELL _TYPE _E PI ))\n          self .cell _counts [ CELL _TYPE _M ES ]  =  len (self .sim ulator .get _cell _ids ( CELL _TYPE _M ES ))\n          self .cell _counts [ CELL _TYPE _END O ]  =  len (self .sim ulator .get _cell _ids ( CELL _TYPE _END O ))\n          self .cell _counts [ CELL _TYPE _COL LAG EN ]  =  len (self .sim ulator .get _cell _ids ( CELL _TYPE _COL LAG EN ))\n          self .cell _counts [ CELL _TYPE _P OT TS ]  =  len (self .sim ulator .get _cell _ids ( CELL _TYPE _P OT TS ))\n         \n          #  Example  migration  logic \n          for  cell  in  self .sim ulator .get _cell _ids ():\n              if  self .sim ulator .get _cell _type (cell )  ==  CELL _TYPE _M ES :\n                  #  Apply  random  movement  forces \n                  self .sim ulator .add _force _to _cell (id = cell ,  fx =np .random .uniform (- 1 , 1 ),  fy =np .random .uniform (- 1 , 1 ))\n                 \n          self .timer  +=   1 \n\n def  main ():\n      #  Set  simulation  parameters \n      sim  =  Com pu Cell Setup .S imulation ()\n      sim .set Simulation Parameters (_ time Steps = 100 0 ,  _ save Output =True ,  _ output Frequency = 100 )\n     \n      #  Register  ste pp ables \n      sim .register Ste pp able (S imulation (sim ,   1 ))\n     \n      #  Add  SB ML  model  if  needed \n      #  sb ml _parser  =  SB ML Parser ()\n      #  sb ml _parser .parse SB ML (' model .sb ml ')\n      #  sim .add SB ML Model (sb ml _parser .model )\n     \n      #  Run  simulation \n      sim .run ()\n\n if  __ name __  ==  \"__ main __\":\n      main ()"
  },
  "output": {
    "output_file": "experiments\\week4-attempt12_20250617_220712_run1\\generated_cc3d_model.cc3d"
  }
}
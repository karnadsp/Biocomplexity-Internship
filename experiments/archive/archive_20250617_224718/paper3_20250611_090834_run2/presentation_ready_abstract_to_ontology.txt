Experiment: paper3
Date: 20250611_090834
Run Number: 2

Initial Description:
- Ovarian cancer cells invade by clearing mesothelial cells

Ontology Annotations:

Cell_Ontology:
  cell_type:
  - {'id': 'CL:0002076', 'label': 'ovarian cancer cell', 'description': 'A malignant cell derived from ovarian tissue.'}
  - {'id': 'CL:0000650', 'label': 'mesothelial cell', 'description': 'A specialized epithelial cell that lines the body cavities and covers the outer surface of visceral organs.'}

Gene_Ontology:
  biological_process:
  - {'id': 'GO:0016477', 'label': 'cell migration', 'description': 'The controlled self-propelled movement of a cell from one site to another.'}
  - {'id': 'GO:0033627', 'label': 'cell adhesion mediated by integrin', 'description': 'The attachment of a cell to another cell or a surface via integrin receptors.'}
  - {'id': 'GO:0007160', 'label': 'cell-matrix adhesion', 'description': 'The binding of a cell to the extracellular matrix via adhesion molecules.'}
  molecular_function:
  - {'id': 'GO:0005178', 'label': 'integrin binding', 'description': 'Binding to an integrin, a heterodimeric adhesion receptor.'}
  cellular_component:
  - {'id': 'GO:0005925', 'label': 'focal adhesion', 'description': 'A cell-substrate junction that anchors the cell to the extracellular matrix.'}

MeSH:
  disease:
  - {'id': 'D010051', 'label': 'Ovarian Neoplasms', 'description': 'Tumors or cancer of the ovary.'}
  biological_process:
  - {'id': 'D015398', 'label': 'Neoplasm Invasiveness', 'description': 'Ability of neoplasms to infiltrate and actively destroy surrounding tissue.'}
  anatomy:
  - {'id': 'A05.360.319.114.630', 'label': 'Ovary', 'description': 'The reproductive organ in female animals that produces eggs and sex hormones.'}
  - {'id': 'A10.615.550', 'label': 'Mesothelium', 'description': 'The layer of flat cells that lines the serous cavities and covers the visceral organs.'}

Ontology Annotations:
```python
from pyrcell3d import CompuCellSetup
from PySteppables import SteppableBasePy
import CompuCell

class OvarianCancerInvasionSimulation(SteppableBasePy):
    def __init__(self, _simulator, _frequency=1):
        SteppableBasePy.__init__(self, _simulator, _frequency)
        
    def start(self):
        # Initialize cell types
        self.cellTypes = {
            'OvarianCancerCell': self.createNewCellType("OvarianCancerCell"),
            'MesothelialCell': self.createNewCellType("MesothelialCell")
        }
        
        # Set cell type parameters
        self.setCellTypeParameters("OvarianCancerCell", {
            'Volume': 50,
            'LambdaVolume': 2.0,
            'TargetVolume': 50,
            'ChemotaxisLambda': 100,
            'Chemotaxis': {'ChemicalField': 'Chemoattractant', 'Lambda': 100}
        })
        
        self.setCellTypeParameters("MesothelialCell", {
            'Volume': 40,
            'LambdaVolume': 2.0,
            'TargetVolume': 40,
            'AdhesionMolecules': {'Integrin': 10}
        })
        
        # Initialize fields
        self.addScalarFieldCellLevelPy("Chemoattractant")
        
        # Create initial cell layout
        for i in range(100):
            cell = self.newCell(self.cellTypes['MesothelialCell'])
            self.cellField[10 + i % 10, 10 + i // 10, 0] = cell
        
        for i in range(20):
            cell = self.newCell(self.cellTypes['OvarianCancerCell'])
            self.cellField[50 + i % 5, 50 + i // 5, 0] = cell
    
    def step(self, mcs):
        # Update chemoattractant field
        chemoattractant = self.getScalarFieldPy("Chemoattractant")
        for x, y, z in self.everyPixel():
            if self.cellField[x, y, z] and self.cellField[x, y, z].type == self.cellTypes['OvarianCancerCell']:
                chemoattractant[x, y, z] = 100
            else:
                chemoattractant[x, y, z] = max(0, chemoattractant[x, y, z] - 1)
        
        # Monitor cell migration and adhesion
        if mcs % 100 == 0:
            self.trackCellCounts()
    
    def trackCellCounts(self):
        cancer_count = 0
        meso_count = 0
        for cell in self.cellList:
            if cell.type == self.cellTypes['OvarianCancerCell']:
                cancer_count += 1
            elif cell.type == self.cellTypes['MesothelialCell']:
                meso_count += 1
        print(f"Step {self.mcs}: Cancer cells={cancer_count}, Mesothelial cells={meso_count}")

CompuCellSetup.registerSteppable(steppable=OvarianCancerInvasionSimulation(_simulator=CompuCellSetup.getSimulator()))
```

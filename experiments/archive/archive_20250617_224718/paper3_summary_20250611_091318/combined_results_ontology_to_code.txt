=== Run 1 ===

Experiment: paper3
Date: 20250611_090720
Run Number: 1

Generated CC3D Code:
```python
from cc3d.core.PySteppables import *
from cc3d import CompuCellSetup

class OvarianCancerSimulation(SteppableBasePy):
    def __init__(self, frequency=1):
        SteppableBasePy.__init__(self, frequency)
        
    def start(self):
        # Initialize cell types
        self.mesothelial_type = self.new_cell_type("Mesothelial")
        self.ovarian_cancer_type = self.new_cell_type("OvarianCancer")
        
        # Set cell type parameters
        self.cell_type_plugin.setTypeId(self.mesothelial_type, 1)
        self.cell_type_plugin.setTypeId(self.ovarian_cancer_type, 2)
        
        # Configure cell adhesion
        self.contact_plugin.setNewContactEnergy(self.mesothelial_type, self.mesothelial_type, 16)
        self.contact_plugin.setNewContactEnergy(self.ovarian_cancer_type, self.ovarian_cancer_type, 16)
        self.contact_plugin.setNewContactEnergy(self.mesothelial_type, self.ovarian_cancer_type, 22)
        
        # Initialize cell field
        for x, y, z in self.every_pixel():
            if x < 20:
                cell = self.new_cell(self.mesothelial_type)
                self.cell_field[x, y, z] = cell
            elif x > 80:
                cell = self.new_cell(self.ovarian_cancer_type)
                self.cell_field[x, y, z] = cell
    
    def step(self, mcs):
        # Implement cell behaviors
        for cell in self.cell_list:
            if cell.type == self.ovarian_cancer_type:
                # Cancer cell migration behavior
                if mcs % 10 == 0:
                    self.move_cell_random(cell)
                
                # Apoptosis probability
                if random.random() < 0.001:
                    cell.targetVolume = 0
                    cell.lambdaVolume = 100
            
            elif cell.type == self.mesothelial_type:
                # Mesothelial cell behavior
                if random.random() < 0.0005:
                    cell.targetVolume = 0
                    cell.lambdaVolume = 100

    def move_cell_random(self, cell):
        x, y, z = int(cell.xCOM), int(cell.yCOM), int(cell.zCOM)
        new_x = x + random.randint(-1, 1)
        new_y = y + random.randint(-1, 1)
        
        if (0 <= new_x < self.dim.x) and (0 <= new_y < self.dim.y):
            if not self.cell_field[new_x, new_y, z]:
                self.cell_field[x, y, z] = None
                self.cell_field[new_x, new_y, z] = cell

CompuCellSetup.register_steppable(steppable=OvarianCancerSimulation(frequency=1))
```

CC3D File Created: experiments\paper3_20250611_090720_run1\generated_cc3d_model.cc3d


==================================================

=== Run 2 ===

Experiment: paper3
Date: 20250611_090834
Run Number: 2

Generated CC3D Code:
```python
from pyrcell3d import CompuCellSetup
from PySteppables import SteppableBasePy
import CompuCell

class OvarianCancerInvasionSimulation(SteppableBasePy):
    def __init__(self, _simulator, _frequency=1):
        SteppableBasePy.__init__(self, _simulator, _frequency)
        
    def start(self):
        # Initialize cell types
        self.cellTypes = {
            'OvarianCancerCell': self.createNewCellType("OvarianCancerCell"),
            'MesothelialCell': self.createNewCellType("MesothelialCell")
        }
        
        # Set cell type parameters
        self.setCellTypeParameters("OvarianCancerCell", {
            'Volume': 50,
            'LambdaVolume': 2.0,
            'TargetVolume': 50,
            'ChemotaxisLambda': 100,
            'Chemotaxis': {'ChemicalField': 'Chemoattractant', 'Lambda': 100}
        })
        
        self.setCellTypeParameters("MesothelialCell", {
            'Volume': 40,
            'LambdaVolume': 2.0,
            'TargetVolume': 40,
            'AdhesionMolecules': {'Integrin': 10}
        })
        
        # Initialize fields
        self.addScalarFieldCellLevelPy("Chemoattractant")
        
        # Create initial cell layout
        for i in range(100):
            cell = self.newCell(self.cellTypes['MesothelialCell'])
            self.cellField[10 + i % 10, 10 + i // 10, 0] = cell
        
        for i in range(20):
            cell = self.newCell(self.cellTypes['OvarianCancerCell'])
            self.cellField[50 + i % 5, 50 + i // 5, 0] = cell
    
    def step(self, mcs):
        # Update chemoattractant field
        chemoattractant = self.getScalarFieldPy("Chemoattractant")
        for x, y, z in self.everyPixel():
            if self.cellField[x, y, z] and self.cellField[x, y, z].type == self.cellTypes['OvarianCancerCell']:
                chemoattractant[x, y, z] = 100
            else:
                chemoattractant[x, y, z] = max(0, chemoattractant[x, y, z] - 1)
        
        # Monitor cell migration and adhesion
        if mcs % 100 == 0:
            self.trackCellCounts()
    
    def trackCellCounts(self):
        cancer_count = 0
        meso_count = 0
        for cell in self.cellList:
            if cell.type == self.cellTypes['OvarianCancerCell']:
                cancer_count += 1
            elif cell.type == self.cellTypes['MesothelialCell']:
                meso_count += 1
        print(f"Step {self.mcs}: Cancer cells={cancer_count}, Mesothelial cells={meso_count}")

CompuCellSetup.registerSteppable(steppable=OvarianCancerInvasionSimulation(_simulator=CompuCellSetup.getSimulator()))
```

CC3D File Created: experiments\paper3_20250611_090834_run2\generated_cc3d_model.cc3d


==================================================

=== Run 3 ===

Experiment: paper3
Date: 20250611_090946
Run Number: 3

Generated CC3D Code:
```python
from pybindCC3D import CompuCellSetup
from cc3d.core.PySteppables import *

class OvarianEpithelialSimulation(SteppableBasePy):
    def __init__(self, frequency=1):
        SteppableBasePy.__init__(self, frequency)
        
    def start(self):
        # Define cell types
        self.epithelial_cell = self.new_cell_type("Epithelial_Ovary", "CL:0000066")
        self.mesothelial_cell = self.new_cell_type("Mesothelial", "CL:0000077")
        
        # Set up parameters
        self.cell_adhesion_params = {
            "Epithelial_Ovary": {"Epithelial_Ovary": 10, "Mesothelial": 5},
            "Mesothelial": {"Epithelial_Ovary": 5, "Mesothelial": 15}
        }
        
        # Configure adhesion
        for cell_type1, adhesion_dict in self.cell_adhesion_params.items():
            for cell_type2, energy in adhesion_dict.items():
                self.get_xml_element('Plugin', {'Name': 'Contact'})\
                    .getElement('Energy', {'Type1': cell_type1, 'Type2': cell_type2})\
                    .ElementCC3D('Energy', {}, str(energy))
        
        # Configure cell motility
        self.get_xml_element('Plugin', {'Name': 'Chemotaxis'})
        self.get_xml_element('Plugin', {'Name': 'Volume'})
        
    def step(self, mcs):
        # Simulation logic for each step
        for cell in self.cell_list:
            if cell.type == self.epithelial_cell:
                # Implement invasion behavior
                if mcs % 100 == 0:
                    self.invade_mesothelial(cell)
            
    def invade_mesothelial(self, cell):
        # Simple invasion logic
        target_cells = [neighbor for neighbor in self.get_cell_neighbors(cell) 
                       if neighbor and neighbor.type == self.mesothelial_cell]
        if target_cells:
            target = target_cells[0]
            # Apply force to simulate invasion
            self.apply_vector_force(cell, target, 0.1)
            
    def on_stop(self):
        # Cleanup if needed
        pass
        
def configure_simulation():
    from cc3d.CompuCellSetup import register_steppable
    register_steppable(OvarianEpithelialSimulation(frequency=1))
    
configure_simulation()
```

CC3D File Created: experiments\paper3_20250611_090946_run3\generated_cc3d_model.cc3d


==================================================

=== Run 4 ===

Experiment: paper3
Date: 20250611_091104
Run Number: 4

Generated CC3D Code:
```python
from pybindCC3D import CompuCellSetup
from PySteppables import *
import CompuCell
import sys

class OvarianCancerSimulation(SteppableBasePy):
    def __init__(self, _simulator, _frequency=1):
        SteppableBasePy.__init__(self, _simulator, _frequency)
        
    def start(self):
        # Initialize cell types
        self.mesothelial = self.addCellType("Mesothelial")
        self.cancer = self.addCellType("OvarianCancer")
        
        # Set up parameters
        self.cellField = self.potts.getCellField()
        self.dim = self.cellField.getDim()
        
        # Configure cell properties
        self.setCellTypeMotilityParameters()
        self.setupInitialConditions()
        
    def setCellTypeMotilityParameters(self):
        # Configure motility parameters
        self.setMotilityParameters(self.mesothelial, 10, 0.5)
        self.setMotilityParameters(self.cancer, 50, 0.8)
        
        # Configure adhesion parameters
        self.setCellTypeAdhesionParameters()
        
    def setCellTypeAdhesionParameters(self):
        # Set adhesion parameters between cell types and medium
        self.setCellTypeAdhesion(self.mesothelial, "Medium", 10)
        self.setCellTypeAdhesion(self.cancer, "Medium", 5)
        
        # Set adhesion between cell types
        self.setCellTypeAdhesion(self.mesothelial, self.mesothelial, 20)
        self.setCellTypeAdhesion(self.cancer, self.cancer, 15)
        self.setCellTypeAdhesion(self.mesothelial, self.cancer, 8)
        
    def setupInitialConditions(self):
        # Create initial cell layout
        for x, y, z in self.everyPixel(10, 10, 1):
            if x < self.dim.x/2:
                cell = self.newCell(self.mesothelial)
                self.cellField.set(x, y, z, cell)
            else:
                cell = self.newCell(self.cancer)
                self.cellField.set(x, y, z, cell)
                
    def step(self, mcs):
        # Implement simulation logic for each step
        if mcs % 100 == 0:
            self.updateCellBehaviors()
            
    def updateCellBehaviors(self):
        # Update cell properties during simulation
        for cell in self.cellList:
            if cell.type == self.cancer:
                # Increase cancer cell motility over time
                self.setMotilityParameters(cell.type, 50 + mcs/10, 0.8)

CompuCellSetup.registerSteppable(steppable=OvarianCancerSimulation(_simulator=CompuCellSetup.getSimulator(), _frequency=1))
```

CC3D File Created: experiments\paper3_20250611_091104_run4\generated_cc3d_model.cc3d


==================================================

=== Run 5 ===

Experiment: paper3
Date: 20250611_091216
Run Number: 5

Generated CC3D Code:
```python
from pybindCC3D import CompuCellSetup
from cc3d.core.PySteppables import *

class OvarianNeoplasmsSimulation(SteppableBasePy):
    def __init__(self, frequency=1):
        SteppableBasePy.__init__(self, frequency)
        
    def start(self):
        # Create cell types
        self.epithelial_cell = self.new_cell_type("Epithelial_Ovary")
        self.mesothelial_cell = self.new_cell_type("Mesothelial")
        
        # Set up parameters
        self.cell_dim = 20
        self.invasion_prob = 0.01
        
        # Initialize cell populations
        for i in range(10):
            cell = self.new_cell(self.epithelial_cell)
            self.cell_field[int(self.dim.x/2) + random.randint(-10,10), 
                           int(self.dim.y/2) + random.randint(-10,10), 
                           0] = cell
            
        for i in range(5):
            cell = self.new_cell(self.mesothelial_cell)
            self.cell_field[random.randint(0,self.dim.x-1), 
                           random.randint(0,self.dim.y-1), 
                           0] = cell
            
    def step(self, mcs):
        # Simulate cell invasion behavior
        for cell in self.cell_list:
            if cell.type == self.epithelial_cell and random.random() < self.invasion_prob:
                # Simulate epithelial to mesenchymal transition
                cell.type = self.mesothelial_cell
                
            if cell.type == self.mesothelial_cell:
                # Simulate increased migration
                if random.random() < 0.1:
                    self.move_cell_random(cell, 1)

    def move_cell_random(self, cell, step_size):
        x, y, z = cell.xCOM, cell.yCOM, cell.zCOM
        new_x = x + random.randint(-step_size, step_size)
        new_y = y + random.randint(-step_size, step_size)
        new_z = z
        self.cell_field[int(new_x), int(new_y), int(new_z)] = cell
```

CC3D File Created: experiments\paper3_20250611_091216_run5\generated_cc3d_model.cc3d


==================================================

{
  "timestamp": "2025-06-17T22:39:49.395710",
  "step": "cc3d_file_creation",
  "input": {
    "python_code": "from cc3d.core.PySteppables import *\n\npython \n from  Com pu Cell 3 D  import  Com pu Cell Setup \n from  ste pp ables  import  Ste pp able Base Py \n\n class  Simulation ( Ste pp able Base Py ):\n      def  __ init __( self ,  _ sim ulator ,  _ model ):\n          super (S imulation ,  self ).__ init __ (_ sim ulator ,  _ model )\n          self .model  =  _ model \n          self .sim ulator  =  _ sim ulator \n        \n          #  Initialize  cell  type  parameters \n          self .cell _type  =  {' ep ith elial ':   0 ,  ' mes ench ym al ':   1 ,  ' endo th elial ':   2 }\n         \n          #  Initialize  mot ility  parameters \n          self .m ot ility _parameters  =  {\n              ' ep ith elial ':  {' mot ility ':   1 . 0 ,  ' p ersistence ':   0 . 5 },\n              ' mes ench ym al ':  {' mot ility ':   2 . 0 ,  ' p ersistence ':   0 . 7 },\n              ' endo th elial ':  {' mot ility ':   0 . 5 ,  ' p ersistence ':   0 . 3 }\n          }\n         \n          #  Initialize  ad hesion  parameters \n          self .ad hesion _parameters  =  {\n              ' ep ith elial ':  {' cell _cell ':   10 . 0 ,  ' cell _medium ':   5 . 0 },\n              ' mes ench ym al ':  {' cell _cell ':   5 . 0 ,  ' cell _medium ':   2 . 0 },\n              ' endo th elial ':  {' cell _cell ':   8 . 0 ,  ' cell _medium ':   3 . 0 }\n          }\n\n      def  start (self ):\n          #  Initialize  simulation \n          self .sim ulator .initialize ()\n         \n          #  Create   3 D  lattice \n          self .sim ulator .create L attice ( 100 ,   100 ,   10 )\n         \n          #  Place  cells \n          self .sim ulator .add Cell G CM ( 50 ,   50 ,   0 ,  self .cell _type [' ep ith elial '])\n          self .sim ulator .add Cell G CM ( 50 ,   50 ,   5 ,  self .cell _type [' mes ench ym al '])\n          self .sim ulator .add Cell G CM ( 50 ,   50 ,   9 ,  self .cell _type [' endo th elial '])\n\n      def  step (self ,  m cs ):\n          #  Update  cell  behaviors \n          for  cell  in  self .sim ulator .cell List :\n              cell _type  =  self .sim ulator .cell Type [cell ]\n              if  cell _type  ==  self .cell _type [' ep ith elial ']:\n                  #  Ep ith elial  to  mes ench ym al  transition  logic \n                  if  cell .m ot ility  >  self .m ot ility _parameters [' ep ith elial '][' mot ility ']:\n                      self .sim ulator .change Cell Type (cell ,  self .cell _type [' mes ench ym al '])\n              elif  cell _type  ==  self .cell _type [' mes ench ym al ']:\n                  #  Cell  migration  logic \n                  cell .m ot ility  +=   0 . 1 \n              elif  cell _type  ==  self .cell _type [' endo th elial ']:\n                  #  Cell  ad hesion  logic \n                  cell .ad hesion  +=   0 . 05 \n\n          #  Update  visualization \n          self .sim ulator .update Visualization ()\n\n #  Run  simulation \n sim  =  Com pu Cell Setup .S imulator ()\n sim .set Simulation (S imulation (sim ))\n sim .run ( 100 )"
  },
  "output": {
    "output_file": "experiments\\week4-attempt 12_20250617_223621_run1\\generated_cc3d_model.cc3d"
  }
}
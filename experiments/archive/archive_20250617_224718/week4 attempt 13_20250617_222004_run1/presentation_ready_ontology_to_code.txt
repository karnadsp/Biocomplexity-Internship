Experiment: week4 attempt 13
Date: 20250617_222004
Run Number: 1

Generated CC3D Code:
``` python 
 from  Com pu Cell Setup  import  *
 from  ste pp ables  import  *

 class  Simulation Ste pp able ( Ste pp able Base Py ):
      def  __ init __( self ,  _ sim ulator ,  _ model ):
          super (S imulation Ste pp able ,  self ).__ init __ (_ sim ulator ,  _ model )
          self .sim ulator  =  _ sim ulator 
          self .model  =  _ model 
        
          #  Register  cell  types 
          self .cell Types  =  {
              ' Ep ith elial ':  {' id ':   1 ,  ' name ':  ' Ep ith elial ',  ' color ':  [ 255 ,   0 ,   0 ]},
              ' Mes ench ym al ':  {' id ':   2 ,  ' name ':  ' Mes ench ym al ',  ' color ':  [ 0 ,   255 ,   0 ]},
              ' End oth elial ':  {' id ':   3 ,  ' name ':  ' End oth elial ',  ' color ':  [ 0 ,   0 ,   255 ]}
          }
         
          #  Biological  processes  parameters 
          self . EM T _rate  =   0 . 1    #  Ep ith elial  to  Mes ench ym al  Transition  rate 
          self .cell _migration _speed  =   1 . 0    #  Cell  migration  speed 
          self .cell _ad hesion _strength  =   50 . 0    #  Cell  ad hesion  strength 
          self .cell _shape _r ig idity  =   100 . 0    #  Cell  shape  rig idity 
          self .cell _mot ility  =   1 . 0    #  Cell  mot ility 
        
          #  Coll agen  matrix  properties 
          self .coll agen _density  =   0 . 5    #  Coll agen  density  in  the  extr acellular  matrix 
        
          #  Initialize  cell  counts 
          self .cell _counts  =  {' Ep ith elial ':   0 ,  ' Mes ench ym al ':   0 ,  ' End oth elial ':   0 }
         
      def  start (self ):
          #  Register  cell  types  with  the  simulator 
          for  cell _type  in  self .cell Types .values ():
              self .sim ulator .register Cell Type (cell _type [' id '],  cell _type [' name '],  cell _type [' color '])
         
          #  Initialize  cell  counts 
          self .cell _counts [' Ep ith elial ']  =  self .sim ulator .count Cells ById (self .cell Types [' Ep ith elial '][' id '])
          self .cell _counts [' Mes ench ym al ']  =  self .sim ulator .count Cells ById (self .cell Types [' Mes ench ym al '][' id '])
          self .cell _counts [' End oth elial ']  =  self .sim ulator .count Cells ById (self .cell Types [' End oth elial '][' id '])
         
          #  Set  up  visualization 
          self .sim ulator .set Display Update Frequency ( 10 )
         
      def  step (self ,  m cs ):
          #  Ep ith elial  to  Mes ench ym al  Transition 
          if  m cs  %   10  ==   0 :
              for  cell  in  self .sim ulator .cell List :
                  if  cell .type  ==  self .cell Types [' Ep ith elial '][' id ']:
                      if  random .random ()  < self . EM T _rate :
                          cell .type  =  self .cell Types [' Mes ench ym al '][' id ']
                          self .cell _counts [' Ep ith elial ']  -=   1 
                          self .cell _counts [' Mes ench ym al ']  +=   1 
        
          #  Update  cell  counts 
          self .cell _counts [' Ep ith elial ']  =  self .sim ulator .count Cells ById (self .cell Types [' Ep ith elial '][' id '])
          self .cell _counts [' Mes ench ym al ']  =  self .sim ulator .count Cells ById (self .cell Types [' Mes ench ym al '][' id '])
          self .cell _counts [' End oth elial ']  =  self .sim ulator .count Cells ById (self .cell Types [' End oth elial '][' id '])
         
          #  Update  visualization 
          self .sim ulator .update Display ()

 def  main ():
      #  Create  simulation 
      simulator  =  Com pu Cell 3 D .S imulator ()
     
      #  Set  simulation  parameters 
      simulator .set Simulation Dimensions ( 100 ,   100 ,   1 )
      simulator .set Box Size ( 10 . 0 )
     
      #  Add  ste pp able 
      simulation _ste pp able  =  Simulation Ste pp able (sim ulator )
      simulator .add Ste pp able (sim ulation _ste pp able )
     
      #  Run  simulation 
      simulator .run ( 100 0 )

 if  __ name __  ==  '__ main __':
      main ()
 ```

CC3D File Created: experiments\week4 attempt 13_20250617_222004_run1\generated_cc3d_model.cc3d

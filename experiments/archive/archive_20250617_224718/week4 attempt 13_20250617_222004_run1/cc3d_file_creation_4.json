{
  "timestamp": "2025-06-17T22:23:32.483404",
  "step": "cc3d_file_creation",
  "input": {
    "python_code": "from cc3d.core.PySteppables import *\n\npython \n from  Com pu Cell Setup  import  *\n from  ste pp ables  import  *\n\n class  Simulation Ste pp able ( Ste pp able Base Py ):\n      def  __ init __( self ,  _ sim ulator ,  _ model ):\n          super (S imulation Ste pp able ,  self ).__ init __ (_ sim ulator ,  _ model )\n          self .sim ulator  =  _ sim ulator \n          self .model  =  _ model \n        \n          #  Register  cell  types \n          self .cell Types  =  {\n              ' Ep ith elial ':  {' id ':   1 ,  ' name ':  ' Ep ith elial ',  ' color ':  [ 255 ,   0 ,   0 ]},\n              ' Mes ench ym al ':  {' id ':   2 ,  ' name ':  ' Mes ench ym al ',  ' color ':  [ 0 ,   255 ,   0 ]},\n              ' End oth elial ':  {' id ':   3 ,  ' name ':  ' End oth elial ',  ' color ':  [ 0 ,   0 ,   255 ]}\n          }\n         \n          #  Biological  processes  parameters \n          self . EM T _rate  =   0 . 1    #  Ep ith elial  to  Mes ench ym al  Transition  rate \n          self .cell _migration _speed  =   1 . 0    #  Cell  migration  speed \n          self .cell _ad hesion _strength  =   50 . 0    #  Cell  ad hesion  strength \n          self .cell _shape _r ig idity  =   100 . 0    #  Cell  shape  rig idity \n          self .cell _mot ility  =   1 . 0    #  Cell  mot ility \n        \n          #  Coll agen  matrix  properties \n          self .coll agen _density  =   0 . 5    #  Coll agen  density  in  the  extr acellular  matrix \n        \n          #  Initialize  cell  counts \n          self .cell _counts  =  {' Ep ith elial ':   0 ,  ' Mes ench ym al ':   0 ,  ' End oth elial ':   0 }\n         \n      def  start (self ):\n          #  Register  cell  types  with  the  simulator \n          for  cell _type  in  self .cell Types .values ():\n              self .sim ulator .register Cell Type (cell _type [' id '],  cell _type [' name '],  cell _type [' color '])\n         \n          #  Initialize  cell  counts \n          self .cell _counts [' Ep ith elial ']  =  self .sim ulator .count Cells ById (self .cell Types [' Ep ith elial '][' id '])\n          self .cell _counts [' Mes ench ym al ']  =  self .sim ulator .count Cells ById (self .cell Types [' Mes ench ym al '][' id '])\n          self .cell _counts [' End oth elial ']  =  self .sim ulator .count Cells ById (self .cell Types [' End oth elial '][' id '])\n         \n          #  Set  up  visualization \n          self .sim ulator .set Display Update Frequency ( 10 )\n         \n      def  step (self ,  m cs ):\n          #  Ep ith elial  to  Mes ench ym al  Transition \n          if  m cs  %   10  ==   0 :\n              for  cell  in  self .sim ulator .cell List :\n                  if  cell .type  ==  self .cell Types [' Ep ith elial '][' id ']:\n                      if  random .random ()  < self . EM T _rate :\n                          cell .type  =  self .cell Types [' Mes ench ym al '][' id ']\n                          self .cell _counts [' Ep ith elial ']  -=   1 \n                          self .cell _counts [' Mes ench ym al ']  +=   1 \n        \n          #  Update  cell  counts \n          self .cell _counts [' Ep ith elial ']  =  self .sim ulator .count Cells ById (self .cell Types [' Ep ith elial '][' id '])\n          self .cell _counts [' Mes ench ym al ']  =  self .sim ulator .count Cells ById (self .cell Types [' Mes ench ym al '][' id '])\n          self .cell _counts [' End oth elial ']  =  self .sim ulator .count Cells ById (self .cell Types [' End oth elial '][' id '])\n         \n          #  Update  visualization \n          self .sim ulator .update Display ()\n\n def  main ():\n      #  Create  simulation \n      simulator  =  Com pu Cell 3 D .S imulator ()\n     \n      #  Set  simulation  parameters \n      simulator .set Simulation Dimensions ( 100 ,   100 ,   1 )\n      simulator .set Box Size ( 10 . 0 )\n     \n      #  Add  ste pp able \n      simulation _ste pp able  =  Simulation Ste pp able (sim ulator )\n      simulator .add Ste pp able (sim ulation _ste pp able )\n     \n      #  Run  simulation \n      simulator .run ( 100 0 )\n\n if  __ name __  ==  '__ main __':\n      main ()"
  },
  "output": {
    "output_file": "experiments\\week4 attempt 13_20250617_222004_run1\\generated_cc3d_model.cc3d"
  }
}
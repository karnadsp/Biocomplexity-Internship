=== Run 1 ===

Experiment: week4-attempt15
Date: 20250617_231933
Run Number: 1

Generated CC3D Code:
``` python 
 from  Com pu Cell 3 D  import  Com pu Cell Setup 
 from  ste pp ables  import  Ste pp able Base Py 
 import  numpy  as  np 

 class  Simulation ( Ste pp able Base Py ):
      def  __ init __( self ,  _ sim ulator ,  _ frequency = 1 ):
          Ste pp able Base Py .__ init __( self ,  _ sim ulator ,  _ frequency )
          self .sim ulator  =  _ sim ulator 
          self .step _period  =  _ frequency 
          self .sim ulation _steps  =   100 0 
          self .output _frequency  =   10 
          self .cell _types  =  [' Ep ith elial ',  ' Mes ench ym al ']
          self .num _cells  =   100 

      def  start (self ):
          self .sim ulator .get _p otts _solver (). set _output _frequency (self .output _frequency )
          self .sim ulator .get _p otts _solver (). set _num _iterations ( 100 )
          self .sim ulator .get _p otts _solver (). set _fl uct uation _s weep ( 0 . 5 )
         
          #  Initialize  cells 
          self .sim ulator .create _l attice ( 100 ,   100 ,   1 )
          for  x  in  range ( 40 ,   60 ):
              for  y  in  range ( 40 ,   60 ):
                  self .sim ulator .cell _field [x ,  y ,   0 ]  =  self .cell _types .index (' Ep ith elial ')
          for  x  in  range ( 30 ,   70 ):
              for  y  in  range ( 30 ,   70 ):
                  if  self .sim ulator .cell _field [x ,  y ,   0 ]  ==  - 1 :
                      self .sim ulator .cell _field [x ,  y ,   0 ]  =  self .cell _types .index (' Mes ench ym al ')

      def  step (self ,  m cs ):
          if  m cs  >  self .sim ulation _steps :
              self .sim ulator .stop _simulation ()

          #  E MT  transition  logic 
          cells  =  self .sim ulator .cell _list 
          for  cell  in  cells :
              if  cell .type  ==  self .cell _types .index (' Ep ith elial '):
                  if  np .random .rand ()  <  0 . 05 :
                      cell .type  =  self .cell _types .index (' Mes ench ym al ')
                      cell .shape  =   1 . 5    #  Change  shape  for  mes ench ym al  cells 
                      cell .m ot ility  =   2 . 0    #  Increase  mot ility 

          #  Cell  migration  and  ad hesion 
          for  cell  in  cells :
              if  cell .type  ==  self .cell _types .index (' Mes ench ym al '):
                  cell .m ot ility  =   2 . 0 
                  cell .ad hesion  =   0 . 5 
              else :
                  cell .m ot ility  =   1 . 0 
                  cell .ad hesion  =   1 . 0 

 Com pu Cell Setup .initialize Simulation ()
 sim  =  Simulation ( Com pu Cell Setup .sim ulator ,   1 )
 Com pu Cell Setup .add Ste pp able (sim )
 Com pu Cell Setup .initialize Simulation ()
 Com pu Cell Setup .run ()
 ```

CC3D File Created: experiments\week4-attempt15_20250617_231933_run1\generated_cc3d_model.cc3d


==================================================

=== Run 2 ===

Experiment: week4-attempt15
Date: 20250617_232259
Run Number: 2

Generated CC3D Code:
``` python 
 from  Com pu Cell Setup  import  *
 from  ste pp ables  import  *

 class  Simulation Ste pp able ( Ste pp able Base Py ):
      def  __ init __( self ,  _ sim ulator ,  _ model ):
          Ste pp able Base Py .__ init __( self ,  _ sim ulator ,  _ model )
          self .sim ulator  =  _ sim ulator 
          self .model  =  _ model 
          self .name  =  " Simulation Ste pp able "
          self  cells  =  []
         
          #  Initialize  cell  types  and  parameters 
          self .cell _types  =  {
              ' Ep ith elial ':  {' id ':   1 ,  ' name ':  ' Ep ith elial ',  ' mot ility ':   1 . 0 ,  ' ad hesion ':   10 . 0 },
              ' Mes ench ym al ':  {' id ':   2 ,  ' name ':  ' Mes ench ym al ',  ' mot ility ':   2 . 0 ,  ' ad hesion ':   5 . 0 }
          }
         
          #  Initialize  simulation  parameters 
          self .sim ulation _parameters  =  {
              ' time _step ':   1 . 0 ,
              ' total _steps ':   100 0 ,
              ' grid _size ':  ( 100 ,   100 ),
              ' number _of _cells ':   100 ,
              ' mot ility _baseline ':   1 . 0 ,
              ' ad hesion _energy ':   10 . 0 ,
              ' em t _probability ':   0 . 1 ,
              ' em t _strength ':   5 . 0 
          }

      def  start (self ):
          #  Initialize  cells 
          for  _  in  range (self .sim ulation _parameters [' number _of _cells ']):
              cell  =  self .sim ulator .cell _field .new _cell (self .cell _types [' Ep ith elial '][' id '])
              cell .position  =  self .sim ulator .get _random _position ()
              self .cells .append (cell )
             
              #  Optionally  create  mes ench ym al  cells 
              if  _  %   2  ==   0 :
                  cell  =  self .sim ulator .cell _field .new _cell (self .cell _types [' Mes ench ym al '][' id '])
                  cell .position  =  self .sim ulator .get _random _position ()
                  self .cells .append (cell )

      def  step (self ,  m cs ):
          #  Update  cell  positions  and  behaviors 
          for  cell  in  self .sim ulator .cell _field .cells :
              #  Apply  mot ility 
              cell  mot ility  =  self .cell _types [cell .type _name ][' mot ility ']
              cell .velocity  =  self .sim ulator .get _random _velocity (m ot ility )
             
              #  Apply  ad hesion 
              cell .ad hesion _energy  =  self .sim ulation _parameters [' ad hesion _energy ']
             
              #  Ep ith elial  to  Mes ench ym al  Transition  ( EM T )
              if  cell .type _name  ==  ' Ep ith elial ':
                  if  self .sim ulator .random _number ()  < self .sim ulation _parameters [' em t _probability ']:
                      cell .type  =  self .cell _types [' Mes ench ym al '][' id ']
                     
          #  Update  simulation  state 
          self .sim ulator .update _cell _positions ()

 def  main ():
      #  Create  simulation 
      simulator  =  Com pu Cell 3 D ()
      model  =  simulator .model 
      model .initialize Simulation ()
     
      #  Add  ste pp able 
      simulation _ste pp able  =  Simulation Ste pp able (sim ulator ,  model )
      model .add _ste pp able (sim ulation _ste pp able )
     
      #  Run  simulation 
      simulator .run ()
     
 if  __ name __  ==  "__ main __":
      main ()
 ```

CC3D File Created: experiments\week4-attempt15_20250617_232259_run2\generated_cc3d_model.cc3d


==================================================

=== Run 3 ===

Experiment: week4-attempt15
Date: 20250617_232611
Run Number: 3

Generated CC3D Code:
``` python 
 from  Com pu Cell 3 D  import  Com pu Cell Setup 
 from  Py Ste pp ables  import  Ste pp able Base Py 
 import  numpy 

 class  E MT Simulation ( Ste pp able Base Py ):
      def  __ init __( self ,  _ sim ulator ,  _ num Cells ):
          Ste pp able Base Py .__ init __( self ,  _ sim ulator )
          self .sim ulator  =  _ sim ulator 
          self .num Cells  =  _ num Cells 
          self .cell Migration Parameter  =   1 . 0 
          self .cell Ad hesion Parameter  =   1 . 0 
          self .em t Parameter  =   1 . 0 

      def  start (self ):
          self .sim ulator .print (" Starting  E MT  Simulation ")
          self .sim ulator .schedule Call (self .step ,   10 )

      def  step (self ,  m cs ):
          pass 

 #  Define  cell  types 
 Ep ith elial  =  {' Name ':  ' Ep ith elial ',  ' Color ':  '# FF 000 0 '}
 Mes ench ym al  =  {' Name ':  ' Mes ench ym al ',  ' Color ':  '# 00 FF 00 '}

 #  Set  up  simulation 
 sim  =  Com pu Cell Setup .S imulator ()
 sim .set Simulation Dimensions ( 100 ,   100 ,   1 )
 sim .set Num Threads ( 4 )

 sim .init Cell k inds ([ Ep ith elial ,  Mes ench ym al ])

 sim .add Ste pp able ( EM TS imulation (sim ,   100 ))
 sim .run ( 100 0 )
 ```

CC3D File Created: experiments\week4-attempt15_20250617_232611_run3\generated_cc3d_model.cc3d


==================================================

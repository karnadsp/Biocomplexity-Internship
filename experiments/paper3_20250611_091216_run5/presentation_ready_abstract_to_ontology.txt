Experiment: paper3
Date: 20250611_091216
Run Number: 5

Initial Description:
- Ovarian cancer cells invade by clearing mesothelial cells

Ontology Annotations:

Cell_Ontology:
  Cell_Type:
  - {'id': 'CL:0000066', 'label': 'epithelial cell of ovary', 'description': 'An epithelial cell that is part of the ovary.'}
  - {'id': 'CL:0000077', 'label': 'mesothelial cell', 'description': 'A squamous epithelial cell that lines the coelomic cavities (peritoneal, pericardial, and pleural) and internal organs.'}
  Process:
  - {'id': 'CL:0000000', 'label': 'cell invasion', 'description': 'The movement of cells into a tissue or structure.'}

Gene_Ontology:
  Biological_Process:
  - {'id': 'GO:0007160', 'label': 'cell-matrix adhesion', 'description': 'The binding of a cell to the extracellular matrix via adhesion molecules.'}
  - {'id': 'GO:0030335', 'label': 'positive regulation of cell migration', 'description': 'Any process that activates or increases the frequency, rate or extent of cell migration.'}
  - {'id': 'GO:0001837', 'label': 'epithelial to mesenchymal transition', 'description': 'A process where epithelial cells lose their polarity and cell-cell adhesion and gain migratory and invasive properties.'}
  Molecular_Function:
  - {'id': 'GO:0005201', 'label': 'extracellular matrix structural constituent', 'description': 'The action of a molecule that contributes to the structural integrity of the extracellular matrix.'}
  Cellular_Component:
  - {'id': 'GO:0005578', 'label': 'proteinaceous extracellular matrix', 'description': 'A layer consisting mainly of proteins (especially collagen) and glycosaminoglycans (mostly as proteoglycans) that forms a sheet underlying cells.'}

MeSH:
  Disease:
  - {'id': 'D010051', 'label': 'Ovarian Neoplasms', 'description': 'Tumors or cancer of the OVARY.'}
  Anatomy:
  - {'id': 'A05.360.319.114.630', 'label': 'Ovary', 'description': 'The reproductive organ (GONADS) in female animals.'}
  - {'id': 'A10.615.550', 'label': 'Mesothelium', 'description': 'The layer of flat cells, derived from the mesoderm, that lines the body cavity of the embryo. In the adult, it forms the simple squamous epithelium that covers the surface of all true serous membranes (PERITONEUM; PERICARDIUM; PLEURA).'}
  Process:
  - {'id': 'D015177', 'label': 'Neoplasm Invasiveness', 'description': 'Ability of neoplasms to infiltrate and actively destroy surrounding tissue.'}

Ontology Annotations:
```python
from pybindCC3D import CompuCellSetup
from cc3d.core.PySteppables import *

class OvarianNeoplasmsSimulation(SteppableBasePy):
    def __init__(self, frequency=1):
        SteppableBasePy.__init__(self, frequency)
        
    def start(self):
        # Create cell types
        self.epithelial_cell = self.new_cell_type("Epithelial_Ovary")
        self.mesothelial_cell = self.new_cell_type("Mesothelial")
        
        # Set up parameters
        self.cell_dim = 20
        self.invasion_prob = 0.01
        
        # Initialize cell populations
        for i in range(10):
            cell = self.new_cell(self.epithelial_cell)
            self.cell_field[int(self.dim.x/2) + random.randint(-10,10), 
                           int(self.dim.y/2) + random.randint(-10,10), 
                           0] = cell
            
        for i in range(5):
            cell = self.new_cell(self.mesothelial_cell)
            self.cell_field[random.randint(0,self.dim.x-1), 
                           random.randint(0,self.dim.y-1), 
                           0] = cell
            
    def step(self, mcs):
        # Simulate cell invasion behavior
        for cell in self.cell_list:
            if cell.type == self.epithelial_cell and random.random() < self.invasion_prob:
                # Simulate epithelial to mesenchymal transition
                cell.type = self.mesothelial_cell
                
            if cell.type == self.mesothelial_cell:
                # Simulate increased migration
                if random.random() < 0.1:
                    self.move_cell_random(cell, 1)

    def move_cell_random(self, cell, step_size):
        x, y, z = cell.xCOM, cell.yCOM, cell.zCOM
        new_x = x + random.randint(-step_size, step_size)
        new_y = y + random.randint(-step_size, step_size)
        new_z = z
        self.cell_field[int(new_x), int(new_y), int(new_z)] = cell
```

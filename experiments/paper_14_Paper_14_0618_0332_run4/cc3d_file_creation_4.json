{
  "timestamp": "2025-06-18T03:33:49.481031",
  "step": "cc3d_file_creation",
  "input": {
    "python_code": "from cc3d.core.PySteppables import *\n\nfrom CompuCell3D import CompuCellSetup\nfrom steppables import SteppableBasePy, Model\nimport os\n\nclass EpithelialProliferationSimulation(SteppableBasePy):\n    def __init__(self, _simulator, _model):\n        SteppableBasePy.__init__(self, _simulator, _model)\n        self.simulator = _simulator\n        self.model = _model\n        \n    def start(self):\n        # Initialize simulation\n        self.simulator.getSimulationThread().steppingOutputFrequency = 100\n        self.simulator.getSimulationThread().outputDirectory = './output'\n        \n        # Create a 3D lattice\n        self.simulator.createEmptyLattice(50, 50, 50, 1, 1, 1)\n        \n        # Add a single epithelial cell in the middle\n        cell = self.simulator.createCell()\n        cell.type = self.simulator.cellTypePluginManager.getPlugin(\"Epithelial\")\n        cell.volume = 1\n        cell.surfaceArea = 1\n        cell.position = (25, 25, 25)\n        self.simulator.addCellToSimulation(cell)\n        \n        # Set up cell cycle model\n        cell_cycle = self.simulator.getPlugin(\"UniformCellCycle\")\n        cell_cycle.duration = 100\n        cell_cycle.initializeCellCycleModel(cell)\n        \n        # Set cell proliferation parameters\n        cell.proliferation = 1.0\n        cell.targetVolume = 2.0\n        \n    def step(self, mcs):\n        # Check if any cell should divide\n        for cell in self.simulator.cellList:\n            if cell.volume > cell.targetVolume:\n                self.simulator.divideCellRandomly(cell)\n                \n    def finish(self):\n        pass\n\ndef main():\n    # Create simulation\n    sim = CompuCellSetup.Simulator()\n    model = Model()\n    \n    # Register cell types\n    model.registerCellType(\"Epithelial\", \"Epithelial\")\n    \n    # Add steppable\n    sim.addSteppable(EpithelialProliferationSimulation(sim, model))\n    \n    # Run simulation\n    sim.run(1000)\n\nif __name__ == \"__main__\":\n    main()"
  },
  "output": {
    "output_file": "experiments\\paper_14_Paper_14_0618_0332_run4\\generated_cc3d_model.cc3d"
  }
}
=== Run 1 ===

Experiment: Paper2
Date: 20250611_085821
Run Number: 1

Initial Description:
-  single cell and cell doublet geometry obtained using a 3D cellular Potts model

Ontology Annotations:

Cell_Ontology:
  terms:
  - {'id': 'CL:0000000', 'label': 'cell', 'description': 'A basic structural and functional unit of living organisms.'}
  - {'id': 'CL:0000003', 'label': 'doublet cell', 'description': 'A cell that is formed by the fusion or incomplete separation of two cells.'}

Gene_Ontology:
  terms:
  - {'id': 'GO:0005623', 'label': 'cell', 'description': 'The basic structural and functional unit of all organisms.'}
  - {'id': 'GO:0044464', 'label': 'cell part', 'description': 'Any constituent part of a cell.'}
  - {'id': 'GO:0009987', 'label': 'cellular process', 'description': 'Any process that is carried out at the cellular level.'}

MeSH:
  terms:
  - {'id': 'D002477', 'label': 'Cell Physiological Phenomena', 'description': 'Cellular processes, properties, and characteristics.'}
  - {'id': 'D002465', 'label': 'Cell Movement', 'description': 'The movement of cells from one location to another.'}
  - {'id': 'D015398', 'label': 'Models, Biological', 'description': 'Theoretical representations that simulate the behavior or activity of biological processes or phenomena.'}
  - {'id': 'D015405', 'label': 'Models, Theoretical', 'description': 'Theoretical representations that simulate the behavior or activity of systems, processes, or phenomena.'}

Other:
  terms:
  - {'id': 'Cellular_Potts_Model', 'label': 'Cellular Potts Model', 'description': 'A computational modeling approach used to simulate the behavior of cells and tissues, often incorporating cell geometry, adhesion, and other physical properties.'}
  - {'id': '3D_Modeling', 'label': '3D Modeling', 'description': 'The process of developing a mathematical representation of any three-dimensional surface of an object via specialized software.'}

Ontology Annotations:
```python
from cc3d.core.PySteppables import *
from cc3d import CompuCellSetup

class CellSimulation(SteppableBasePy):
    def __init__(self, frequency=1):
        SteppableBasePy.__init__(self, frequency)
        
    def start(self):
        # Initialize cell types
        self.cell_type = self.add_new_cell_type("Cell")
        self.doublet_type = self.add_new_cell_type("DoubletCell")
        
        # Set basic parameters
        self.cell_field = self.potts.getCellField()
        self.dim = self.cell_field.getDim()
        
        # Place initial cells
        for i in range(10):
            cell = self.new_cell(self.cell_type)
            self.cell_field[random.randint(0, self.dim.x-1), 
                           random.randint(0, self.dim.y-1), 
                           0] = cell
        
        # Place some doublet cells
        for i in range(5):
            cell = self.new_cell(self.doublet_type)
            self.cell_field[random.randint(0, self.dim.x-1), 
                           random.randint(0, self.dim.y-1), 
                           0] = cell

    def step(self, mcs):
        # Basic simulation step
        for cell in self.cell_list:
            if cell.type == self.doublet_type:
                # Doublet cells have different properties
                cell.targetVolume = 50
                cell.lambdaVolume = 2.0
            else:
                # Regular cells
                cell.targetVolume = 30
                cell.lambdaVolume = 1.0

CompuCellSetup.register_steppable(steppable=CellSimulation(frequency=1))
```


==================================================

=== Run 2 ===

Experiment: Paper2
Date: 20250611_085911
Run Number: 2

Initial Description:
-  single cell and cell doublet geometry obtained using a 3D cellular Potts model

Ontology Annotations:

Cell_Ontology:
  terms:
  - {'id': 'CL:0000000', 'label': 'cell', 'description': 'A basic structural and functional unit of all living organisms.'}
  - {'id': 'CL:0000003', 'label': 'doublet cell', 'description': 'A cell that is formed by the fusion or close association of two cells.'}

Gene_Ontology:
  terms:
  - {'id': 'GO:0005623', 'label': 'cell', 'description': 'The basic structural and functional unit of all organisms.'}
  - {'id': 'GO:0044464', 'label': 'cell part', 'description': 'Any constituent part of a cell.'}
  - {'id': 'GO:0032502', 'label': 'developmental process', 'description': 'A biological process whose specific outcome is the progression of an integrated living unit over time from an initial condition to a later condition.'}

MeSH:
  terms:
  - {'id': 'D002477', 'label': 'Cell', 'description': 'The fundamental, structural, and functional units or subunits of living organisms.'}
  - {'id': 'D015398', 'label': 'Models, Biological', 'description': 'Theoretical representations that simulate the behavior or activity of biological processes or diseases.'}
  - {'id': 'D015405', 'label': 'Models, Theoretical', 'description': 'Theoretical representations that simulate the behavior or activity of systems, processes, or phenomena.'}
  - {'id': 'D015407', 'label': 'Models, Statistical', 'description': 'Statistical formulations or analyses which, when applied to data and found to fit the data, are then used to verify the assumptions and parameters used in the analysis.'}

Other:
  terms:
  - {'label': '3D cellular Potts model', 'description': 'A computational model used to simulate the behavior of cells in three dimensions, based on the Potts model from statistical mechanics.'}
  - {'label': 'single cell geometry', 'description': 'The spatial configuration and shape of an individual cell.'}
  - {'label': 'cell doublet geometry', 'description': 'The spatial configuration and shape of a doublet cell, formed by the close association or fusion of two cells.'}

Ontology Annotations:
```python
from pybind import CompuCellSetup
from PySteppables import SteppableBasePy
from PySteppablesExamples import MitosisSteppable

class CellSimulation(SteppableBasePy):
    def __init__(self, _simulator, _frequency=1):
        SteppableBasePy.__init__(self, _simulator, _frequency)
        
    def start(self):
        # Define cell types
        self.cell_type = self.addCellType("Cell")
        self.doublet_type = self.addCellType("DoubletCell")
        
        # Set basic parameters
        cell_params = {
            'VolumeLambda': 2.0,
            'TargetVolume': 25,
            'LambdaVolume': 2.0
        }
        
        doublet_params = {
            'VolumeLambda': 4.0,
            'TargetVolume': 50,
            'LambdaVolume': 4.0
        }
        
        # Apply parameters to cell types
        self.setCellParameters(self.cell_type, **cell_params)
        self.setCellParameters(self.doublet_type, **doublet_params)
        
        # Initialize cells
        for i in range(10):
            cell = self.newCell(self.cell_type)
            self.cellField[10*i:10*i+5, 10*i:10*i+5, 0] = cell
        
        for i in range(5):
            doublet = self.newCell(self.doublet_type)
            self.cellField[50+10*i:50+10*i+10, 50+10*i:50+10*i+10, 0] = doublet

    def step(self, mcs):
        # Update cell properties each step
        for cell in self.cellList:
            if cell.type == self.cell_type:
                cell.targetVolume += 0.1 if mcs % 10 == 0 else 0
            elif cell.type == self.doublet_type:
                cell.targetVolume += 0.2 if mcs % 5 == 0 else 0

CompuCellSetup.registerSteppable(steppable=CellSimulation(_simulator=CompuCellSetup.getSimulator(), _frequency=1))
```


==================================================

=== Run 3 ===

Experiment: Paper2
Date: 20250611_090008
Run Number: 3

Initial Description:
-  single cell and cell doublet geometry obtained using a 3D cellular Potts model

Ontology Annotations:

Cell_Ontology:
  cell_types:
  - {'id': 'CL:0000000', 'label': 'cell', 'description': 'A basic structural and functional unit of all living organisms.'}
  - {'id': 'CL:0000003', 'label': 'doublet cell', 'description': 'A cell that is formed by the fusion or close association of two cells.'}

Gene_Ontology:
  biological_processes:
  - {'id': 'GO:0009987', 'label': 'cellular process', 'description': 'Any process that is carried out at the cellular level.'}
  - {'id': 'GO:0007010', 'label': 'cytoskeleton organization', 'description': 'A process that is carried out at the cellular level which results in the assembly, arrangement of constituent parts, or disassembly of cytoskeletal structures.'}
  cellular_components:
  - {'id': 'GO:0005623', 'label': 'cell', 'description': 'The basic structural and functional unit of all organisms.'}
  molecular_functions:
  - {'id': 'GO:0005198', 'label': 'structural molecule activity', 'description': 'The action of a molecule that contributes to the structural integrity of a complex or assembly within or outside a cell.'}

MeSH:
  descriptors:
  - {'id': 'D002477', 'label': 'Cell Physiological Phenomena', 'description': 'Cellular processes, properties, and characteristics.'}
  - {'id': 'D002465', 'label': 'Cell Movement', 'description': 'The movement of cells from one location to another.'}
  - {'id': 'D015398', 'label': 'Models, Biological', 'description': 'Theoretical representations that simulate the behavior or activity of biological processes or diseases.'}
  - {'id': 'D015091', 'label': 'Computer Simulation', 'description': 'Computer-based representation of physical systems and phenomena such as chemical processes.'}

additional_annotations:
  model_type:
  - label
  - description
  geometry:
  - label
  - description

Ontology Annotations:
```python
from pybind11_tests import CompuCellSetup
from PySteppables import SteppableBasePy
from PyPlugins import *

class BasicCellSimulation(SteppableBasePy):
    def __init__(self, _simulator, _frequency=1):
        SteppableBasePy.__init__(self, _simulator, _frequency)
        
    def start(self):
        # Initialize cell types
        self.cell = self.createNewCellType("CL:0000000", "cell")
        self.doublet_cell = self.createNewCellType("CL:0000003", "doublet_cell")
        
        # Set basic parameters
        self.cell.type = self.cell
        self.doublet_cell.type = self.doublet_cell
        
        # Set target volume parameters
        self.cell.targetVolume = 25
        self.doublet_cell.targetVolume = 50
        
        # Create initial cells
        self.createCell(self.cell, (0, 0, 0))
        self.createCell(self.doublet_cell, (10, 10, 0))
        
    def step(self, mcs):
        # Basic simulation step
        for cell in self.cellList:
            if cell.type == self.cell:
                cell.targetVolume += 0.1  # Simple growth model
            elif cell.type == self.doublet_cell:
                cell.lambdaVolume = 2.0  # Different volume constraint
                
        # Update visualization
        if mcs % 10 == 0:
            self.visualizeCells()

def configureSimulation(sim):
    CompuCellSetup.registerSteppable(BasicCellSimulation(sim, 1))
    return sim
```


==================================================

=== Run 4 ===

Experiment: Paper2
Date: 20250611_090101
Run Number: 4

Initial Description:
-  single cell and cell doublet geometry obtained using a 3D cellular Potts model

Ontology Annotations:

Cell_Ontology:
  terms:
  - {'id': 'CL:0000000', 'label': 'cell', 'description': 'A basic structural and functional unit of living organisms.'}
  - {'id': 'CL:0000003', 'label': 'cell doublet', 'description': 'A pair of cells that are in close contact or adhesion, often used in modeling studies.'}

Gene_Ontology:
  terms:
  - {'id': 'GO:0005623', 'label': 'cell', 'description': 'The basic structural and functional unit of all organisms.'}
  - {'id': 'GO:0044464', 'label': 'cell part', 'description': 'Any constituent part of a cell, the basic structural and functional unit of all organisms.'}
  - {'id': 'GO:0009986', 'label': 'cell surface', 'description': 'The external part of the cell wall and/or plasma membrane.'}

MeSH:
  terms:
  - {'id': 'D002477', 'label': 'Cell Adhesion', 'description': 'Adherence of cells to surfaces or to other cells.'}
  - {'id': 'D002465', 'label': 'Cell Movement', 'description': 'The movement of cells from one location to another.'}
  - {'id': 'D015398', 'label': 'Models, Biological', 'description': 'Theoretical representations that simulate the behavior or activity of biological processes or diseases.'}
  - {'id': 'D015405', 'label': 'Models, Theoretical', 'description': 'Theoretical representations that simulate the behavior or activity of systems, processes, or phenomena.'}
  - {'id': 'D015190', 'label': 'Computer Simulation', 'description': 'Computer-based representation of physical systems and phenomena such as chemical processes.'}

Other:
  terms:
  - {'id': 'Cellular_Potts_Model', 'label': 'Cellular Potts Model', 'description': 'A computational modeling technique used to simulate cellular behaviors and interactions, including cell adhesion, movement, and geometry.'}
  - {'id': '3D_Modeling', 'label': '3D Modeling', 'description': 'The process of developing a mathematical representation of any three-dimensional surface of an object.'}

Ontology Annotations:
```python
from pybindCC3D import CompuCellSetup
from PyQt5.QtCore import *
from PyQt5.QtGui import *

import sys
from random import uniform
import math

class CellOntologySteppable(steppables.SteppableBasePy):
    def __init__(self, _simulator, _frequency=1):
        steppables.SteppableBasePy.__init__(self, _simulator, _frequency)
        
    def start(self):
        # Define cell types
        self.cell_type = self.addCellType("Cell")
        self.cell_doublet_type = self.addCellType("CellDoublet")
        
        # Set basic parameters
        self.cell_type_params = {
            "Volume": 25,
            "Surface": 20,
            "TargetVolume": 25,
            "LambdaVolume": 2.0,
            "TargetSurface": 20,
            "LambdaSurface": 0.2
        }
        
        self.cell_doublet_params = {
            "Volume": 50,
            "Surface": 30,
            "TargetVolume": 50,
            "LambdaVolume": 2.0,
            "TargetSurface": 30,
            "LambdaSurface": 0.2
        }
        
        # Configure cell types
        self.setCellTypeParameters(self.cell_type, self.cell_type_params)
        self.setCellTypeParameters(self.cell_doublet_type, self.cell_doublet_params)
        
        # Set adhesion parameters
        self.setCellTypeCellTypeAdhesion("Cell", "Cell", 10)
        self.setCellTypeCellTypeAdhesion("Cell", "CellDoublet", 15)
        self.setCellTypeCellTypeAdhesion("CellDoublet", "CellDoublet", 20)
        
        # Initialize cells
        for i in range(10):
            cell = self.newCell(self.cell_type)
            self.cellField[10+i, 10+i, 0] = cell
            
        for i in range(5):
            cell = self.newCell(self.cell_doublet_type)
            self.cellField[30+i, 30+i, 0] = cell

    def step(self, mcs):
        # Basic cell behavior during simulation
        for cell in self.cellList:
            if cell.type == self.cell_type:
                if mcs % 10 == 0:
                    cell.targetVolume += uniform(-1, 1)
            elif cell.type == self.cell_doublet_type:
                if mcs % 20 == 0:
                    cell.lambdaVolume *= uniform(0.9, 1.1)

CompuCellSetup.registerSteppable(CellOntologySteppable(_simulator, _frequency=1))
```


==================================================

=== Run 5 ===

Experiment: Paper2
Date: 20250611_090210
Run Number: 5

Initial Description:
-  single cell and cell doublet geometry obtained using a 3D cellular Potts model

Ontology Annotations:

Cell_Ontology:
- cell (ID: CL:0000000)
- cell doublet (ID: CL:0000003)

Gene_Ontology:
- cell (ID: GO:0005623)
- cell part (ID: GO:0044464)
- cell surface (ID: GO:0009986)

MeSH:
- Cell Adhesion (ID: D002477)
- Cell Movement (ID: D002465)
- Models, Biological (ID: D015190)
- Computer Simulation (ID: D015191)
- Cellular Potts Model (ID: D016678)

Other:
- 3D cellular Potts model (ID: OMIT:0000000)

Ontology Annotations:
```python
from cc3d.core.PySteppables import *
from cc3d import CompuCellSetup

class CellAdhesionSimulation(SteppableBasePy):
    def __init__(self, frequency=1):
        SteppableBasePy.__init__(self, frequency)
        
    def start(self):
        # Define cell types
        self.cell_type = self.add_new_type("Cell", 1)
        self.cell_doublet_type = self.add_new_type("CellDoublet", 2)
        
        # Set cell adhesion parameters
        self.cell_adhesion_plugin = self.get_cell_adhesion_plugin()
        self.cell_adhesion_plugin.set_adhesion_energy(self.cell_type, self.cell_type, 10)
        self.cell_adhesion_plugin.set_adhesion_energy(self.cell_type, self.cell_doublet_type, 20)
        self.cell_adhesion_plugin.set_adhesion_energy(self.cell_doublet_type, self.cell_doublet_type, 15)
        
        # Initialize cells
        for i in range(10):
            cell = self.potts.createCell()
            cell.type = self.cell_type
            self.cell_field[0:10, 0:10, 0] = cell
            
        for i in range(5):
            cell = self.potts.createCell()
            cell.type = self.cell_doublet_type
            self.cell_field[20:30, 20:30, 0] = cell

    def step(self, mcs):
        # Simulation step logic
        for cell in self.cell_list:
            if cell.type == self.cell_type:
                # Apply random motion to single cells
                if mcs % 10 == 0:
                    cell.lambdaVecX = 2.0 * (random.random() - 0.5)
                    cell.lambdaVecY = 2.0 * (random.random() - 0.5)
            elif cell.type == self.cell_doublet_type:
                # Apply coordinated motion to doublets
                if mcs % 20 == 0:
                    cell.lambdaVecX = 1.5 * (random.random() - 0.5)
                    cell.lambdaVecY = 1.5 * (random.random() - 0.5)

CompuCellSetup.register_steppable(steppable=CellAdhesionSimulation(frequency=1))
```


==================================================

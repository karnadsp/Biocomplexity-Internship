{
  "timestamp": "2025-06-18T03:15:40.275813",
  "step": "cc3d_file_creation",
  "input": {
    "python_code": "from cc3d.core.PySteppables import *\n\nfrom CompuCell3D import CompuCellSetup, Simulation\nfrom steppables import SteppableBasePy\nfrom PySBML import SBMLTypes\n\nclass SimulationClass(SteppableBasePy):\n    def __init__(self, _simulator, _simulation_name):\n        super(SimulationClass, self).__init__(_simulator, _simulation_name)\n        self.simulator = _simulator\n        self.simulation_name = _simulation_name\n        self.simulation_duration = 1000  # Simulation duration in Monte Carlo steps\n        \n    def start(self):\n        # Initialize cell types and parameters\n        self.cell_type = self.simulator.get_cell_type_plugin()\n        self.cell_type.type_name = 'Epithelial'\n        self.cell_type.description = 'Epithelial cell type'\n        \n        # Load SBML model for cell cycle regulation\n        self.sbml_model = self.simulator.get_sbml_model()\n        self.sbml_model.load_SBML_model('cell_cycle.sbml')\n        \n        # Set initial cell properties\n        self.initial_cell = self.simulator.cell_field.get_new_cell(self.cell_type)\n        self.initial_cell.volume = 10.0\n        self.initial_cell.position = [50, 50, 0]\n        self.simulator.cell_field.add_cell(self.initial_cell)\n        \n    def step(self, mcs):\n        # Check if cell should divide based on cell cycle model\n        if mcs > 100 and mcs % 100 == 0:\n            for cell in self.simulator.cell_field.iterate():\n                if cell.type == self.cell_type and cell.volume > 20.0:\n                    self.simulator.divide_cell(cell)\n                    \n    def finish(self):\n        pass\n\ndef main():\n    # Create simulation\n    sim = Simulation()\n    sim.simulation_name = 'EpithelialProliferation'\n    sim.simulation_duration = 1000\n    \n    # Register steppables\n    sim.register_steppable(SimulationClass(sim))\n    \n    # Add cell types\n    sim.cell_types = ['Epithelial']\n    \n    # Set simulation parameters\n    sim.output_directory = './output'\n    sim.checkpoint_save_interval = 100\n    sim.get_potts_solver().set_number_of_iterations(100)\n    sim.get_potts_solver().set_fluctuation_sweep(0.1)\n    \n    # Run simulation\n    sim.run()\n\nif __name__ == '__main__':\n    main()"
  },
  "output": {
    "output_file": "experiments\\paper_12_Paper_12_0618_0314_run3\\generated_cc3d_model.cc3d"
  }
}
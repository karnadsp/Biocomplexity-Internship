{
  "timestamp": "2025-06-18T01:32:55.052735",
  "step": "cc3d_file_creation",
  "input": {
    "python_code": "from cc3d.core.PySteppables import *\n\nfrom CompuCell3D import CompuCellSetup\nfrom steppables import SteppableBasePy\n\nclass Simulation(SteppableBasePy):\n    def __init__(self, _simulator, _frequency=1):\n        SteppableBasePy.__init__(self, _simulator, _frequency)\n        self.simulator = _simulator\n        self.step = 0\n        self.max_steps = 100  # Number of steps to run the simulation\n\n    def start(self):\n        self.simulator.getSimulationDimensions()\n        self.simulator.createLattice(50, 50, 1)\n        \n        # Initialize cell types\n        self.cellType = {'Epithelial': 0, 'Cancer': 1, 'IntraductalCarcinoma': 2}\n        \n        # Add cell types to the simulation\n        self.simulator.addCellType(self.cellType['Epithelial'], \"Epithelial\")\n        self.simulator.addCellType(self.cellType['Cancer'], \"Cancer\")\n        self.simulator.addCellType(self.cellType['IntraductalCarcinoma'], \"IntraductalCarcinoma\")\n        \n        # Set cell properties\n        self.simulator.setVolumeConstraint(self.cellType['Epithelial'], 10)\n        self.simulator.setVolumeConstraint(self.cellType['Cancer'], 15)\n        self.simulator.setVolumeConstraint(self.cellType['IntraductalCarcinoma'], 20)\n        \n        # Set cell proliferation parameters\n        self.simulator.setProliferationParameters(self.cellType['Epithelial'], 0.5, 0.1, 1, 1)\n        self.simulator.setProliferationParameters(self.cellType['Cancer'], 0.6, 0.2, 1, 1)\n        self.simulator.setProliferationParameters(self.cellType['IntraductalCarcinoma'], 0.7, 0.3, 1, 1)\n        \n        # Set apoptosis parameters\n        self.simulator.setApoptosisParameters(self.cellType['Epithelial'], 0.1, 0.1, 1)\n        self.simulator.setApoptosisParameters(self.cellType['Cancer'], 0.05, 0.05, 1)\n        self.simulator.setApoptosisParameters(self.cellType['IntraductalCarcinoma'], 0.01, 0.01, 1)\n        \n        # Set necrosis parameters\n        self.simulator.setNecrosisParameters(self.cellType['Epithelial'], 0.2, 0.2, 1)\n        self.simulator.setNecrosisParameters(self.cellType['Cancer'], 0.1, 0.1, 1)\n        self.simulator.setNecrosisParameters(self.cellType['IntraductalCarcinoma'], 0.05, 0.05, 1)\n        \n        # Set cell adhesion parameters\n        self.simulator.setAdhesionParameters(self.cellType['Epithelial'], self.cellType['Epithelial'], 10)\n        self.simulator.setAdhesionParameters(self.cellType['Cancer'], self.cellType['Cancer'], 5)\n        self.simulator.setAdhesionParameters(self.cellType['IntraductalCarcinoma'], self.cellType['IntraductalCarcinoma'], 3)\n        \n        # Set cell contractility parameters\n        self.simulator.setContractilityParameters(self.cellType['Epithelial'], 10)\n        self.simulator.setContractilityParameters(self.cellType['Cancer'], 5)\n        self.simulator.setContractilityParameters(self.cellType['IntraductalCarcinoma'], 3)\n        \n        # Add solver for volume constraint\n        self.simulator.addSolver(\"Volume\", \"Constraint\")\n        \n    def step(self):\n        self.step += 1\n        if self.step >= self.max_steps:\n            self.simulator.stopSimulation()\n            \n        # Check for apoptosis and necrosis\n        for cell in self.simulator.getCells():\n            if cell.type == self.cellType['Epithelial'] and cell.apoptosis:\n                self.simulator.removeCell(cell)\n            if cell.type == self.cellType['Cancer'] and cell.necrosis:\n                self.simulator.removeCell(cell)\n            if cell.type == self.cellType['IntraductalCarcinoma'] and cell.necrosis:\n                self.simulator.removeCell(cell)\n                \n        # Check for cell proliferation\n        for cell in self.simulator.getCells():\n            if cell.volume > cell.maxVolume:\n                self.simulator.splitCell(cell)\n                \n    def finish(self):\n        pass"
  },
  "output": {
    "output_file": "experiments\\paper_01_Lattice-Based_Model_0618_0130_run2\\generated_cc3d_model.cc3d"
  }
}
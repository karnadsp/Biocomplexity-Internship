Experiment: Paper2
Date: 20250611_090101
Run Number: 4

Initial Description:
-  single cell and cell doublet geometry obtained using a 3D cellular Potts model

Ontology Annotations:

Cell_Ontology:
  terms:
  - {'id': 'CL:0000000', 'label': 'cell', 'description': 'A basic structural and functional unit of living organisms.'}
  - {'id': 'CL:0000003', 'label': 'cell doublet', 'description': 'A pair of cells that are in close contact or adhesion, often used in modeling studies.'}

Gene_Ontology:
  terms:
  - {'id': 'GO:0005623', 'label': 'cell', 'description': 'The basic structural and functional unit of all organisms.'}
  - {'id': 'GO:0044464', 'label': 'cell part', 'description': 'Any constituent part of a cell, the basic structural and functional unit of all organisms.'}
  - {'id': 'GO:0009986', 'label': 'cell surface', 'description': 'The external part of the cell wall and/or plasma membrane.'}

MeSH:
  terms:
  - {'id': 'D002477', 'label': 'Cell Adhesion', 'description': 'Adherence of cells to surfaces or to other cells.'}
  - {'id': 'D002465', 'label': 'Cell Movement', 'description': 'The movement of cells from one location to another.'}
  - {'id': 'D015398', 'label': 'Models, Biological', 'description': 'Theoretical representations that simulate the behavior or activity of biological processes or diseases.'}
  - {'id': 'D015405', 'label': 'Models, Theoretical', 'description': 'Theoretical representations that simulate the behavior or activity of systems, processes, or phenomena.'}
  - {'id': 'D015190', 'label': 'Computer Simulation', 'description': 'Computer-based representation of physical systems and phenomena such as chemical processes.'}

Other:
  terms:
  - {'id': 'Cellular_Potts_Model', 'label': 'Cellular Potts Model', 'description': 'A computational modeling technique used to simulate cellular behaviors and interactions, including cell adhesion, movement, and geometry.'}
  - {'id': '3D_Modeling', 'label': '3D Modeling', 'description': 'The process of developing a mathematical representation of any three-dimensional surface of an object.'}

Ontology Annotations:
```python
from pybindCC3D import CompuCellSetup
from PyQt5.QtCore import *
from PyQt5.QtGui import *

import sys
from random import uniform
import math

class CellOntologySteppable(steppables.SteppableBasePy):
    def __init__(self, _simulator, _frequency=1):
        steppables.SteppableBasePy.__init__(self, _simulator, _frequency)
        
    def start(self):
        # Define cell types
        self.cell_type = self.addCellType("Cell")
        self.cell_doublet_type = self.addCellType("CellDoublet")
        
        # Set basic parameters
        self.cell_type_params = {
            "Volume": 25,
            "Surface": 20,
            "TargetVolume": 25,
            "LambdaVolume": 2.0,
            "TargetSurface": 20,
            "LambdaSurface": 0.2
        }
        
        self.cell_doublet_params = {
            "Volume": 50,
            "Surface": 30,
            "TargetVolume": 50,
            "LambdaVolume": 2.0,
            "TargetSurface": 30,
            "LambdaSurface": 0.2
        }
        
        # Configure cell types
        self.setCellTypeParameters(self.cell_type, self.cell_type_params)
        self.setCellTypeParameters(self.cell_doublet_type, self.cell_doublet_params)
        
        # Set adhesion parameters
        self.setCellTypeCellTypeAdhesion("Cell", "Cell", 10)
        self.setCellTypeCellTypeAdhesion("Cell", "CellDoublet", 15)
        self.setCellTypeCellTypeAdhesion("CellDoublet", "CellDoublet", 20)
        
        # Initialize cells
        for i in range(10):
            cell = self.newCell(self.cell_type)
            self.cellField[10+i, 10+i, 0] = cell
            
        for i in range(5):
            cell = self.newCell(self.cell_doublet_type)
            self.cellField[30+i, 30+i, 0] = cell

    def step(self, mcs):
        # Basic cell behavior during simulation
        for cell in self.cellList:
            if cell.type == self.cell_type:
                if mcs % 10 == 0:
                    cell.targetVolume += uniform(-1, 1)
            elif cell.type == self.cell_doublet_type:
                if mcs % 20 == 0:
                    cell.lambdaVolume *= uniform(0.9, 1.1)

CompuCellSetup.registerSteppable(CellOntologySteppable(_simulator, _frequency=1))
```

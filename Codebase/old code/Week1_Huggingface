import requests
import json

# Set up Hugging Face API URL and authentication
API_URL = "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.3"
headers = {"Authorization": "Bearer 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"}

# Function to call Hugging Face API
def query(payload):
    response = requests.post(API_URL, headers=headers, json=payload)

    if response.status_code != 200:  # API returned an error
        print(f"Error {response.status_code}: {response.text}")
        return None

    try:
        return response.json()  # Try parsing the response
    except json.decoder.JSONDecodeError:
        print("Failed to decode JSON response. The API might have returned an empty response.")
        return None

# Function to prompt user for a natural-language description
def get_user_input():
    return input("Describe the biological system you wish to model: ")

# Function to generate ontology-focused clarification questions using the API
def generate_clarification_questions(description):
    payload = {"inputs": f"Generate ontology-focused clarification questions for: '{description}', covering Cell Ontology, GO terms, MeSH terms, and key parameters."}
    response = query(payload)
    return response

# Function to capture user responses to generated questions
def get_clarifications(questions):
    print("\nPlease answer the following ontology-based clarification questions:")
    responses = {}
    for i, q in enumerate(questions[0]["generated_text"].split("\n")):
        responses[f"Q{i+1}"] = input(f"{q}\nYour answer: ")
    return responses

# Function to generate structured ontology-based annotations using the API
def generate_annotations(clarifications):
    payload = {"inputs": f"Convert the following responses into structured ontology-based annotations in JSON format: {json.dumps(clarifications)}"}
    response = query(payload)
    return response

# Function to generate CC3D scaffold code using the API
def generate_cc3d_code(annotations):
    payload = {"inputs": f"Generate CC3D starter code (XML/Python) based on the following structured ontology annotations: {annotations}"}
    response = query(payload)
    return response

# Main workflow
description = get_user_input()
questions = generate_clarification_questions(description)
clarifications = get_clarifications(questions)
annotations = generate_annotations(clarifications)
cc3d_code = generate_cc3d_code(annotations)

# Display results
print("\nGenerated Ontology-Based Annotations:\n", annotations)
print("\nGenerated CC3D Starter Code:\n", cc3d_code)